version: "3"

services:
  api-gateway:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: api-gateway
    ports:
      - "${API_GATEWAY_PORT}:${API_GATEWAY_PORT}"
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - RABBITMQ_HOST=${RABBITMQ_HOST}  
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - redis
      - postgres
      - rabbitmq
    networks:
      - backend

  customer-service:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: customer-service
    ports:
      - "${CUSTOMER_SERVICE_PORT}:${CUSTOMER_SERVICE_PORT}"
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - backend

  product-service:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: product-service
    ports:
      - "${PRODUCT_SERVICE_PORT}:${PRODUCT_SERVICE_PORT}"
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - backend

  purchase-service:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: purchase-service
    ports:
      - "${PURCHASE_SERVICE_PORT}:${PURCHASE_SERVICE_PORT}"
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - backend

  redis:
    image: redis:latest
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ./data/redis/conf:/user/local/etc/redis
    networks:
      - backend

  postgres:
    image: postgres:15-alpine
    restart: "unless-stopped"
    ports:
      - "${DB_PORT}:5432"
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12.10
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "15672:15672"  # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
